# -*- coding: utf-8 -*-
"""Analysis of unemployment data in the us

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ifjID9XEcqUKiCh00FpBBKIN5PQSxWLo

# Unemployment Rates in the USA

This a Data Analysis project, where I used the Fred API to extract data about unemployment in the USA. FRED stands for the Federal Reserve Economic Data, which I extracted, cleaned, and wrangled data, to be able to visualize and understand the job market and what it can affect in the us.

# Importing and installing the neccessary libaries
"""

!pip install fredapi

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express  as px

plt.style.use("fivethirtyeight")
pd.set_option("display.max_columns", 500)
color_palette = plt.rcParams["axes.prop_cycle"].by_key()["color"]

from fredapi import Fred
#key is available at fred website api key, available upon request

from google.colab import userdata
fred_key = userdata.get('fred_key')

"""# Getting the *Data*


*   Creating Fred object to pull data
*   Loading data


"""

fred = Fred(api_key = fred_key)

sp = fred.search("S&P", order_by = "popularity")

sp.shape

sp

"""# Pull Raw Data"""

sp4 =fred.get_series(series_id="SP500")

sp4.plot(figsize=(10,5), title ="S&P500", lw =2);

unemp_res = fred.search("unemployment")

unemp_res

ur = fred.get_series('UNRATE')

ur.plot()

hs = fred.search('unemployment rate state', filter =('frequency','Monthly'))
hs

hs_df = hs.query('seasonal_adjustment == "Seasonally Adjusted" and units== "Percent" ')

hs_df.shape

#hs_df = hs_df.loc[hs_df['title'].str.contains('Unemployment Rate state')]
un_df = hs_df.loc[hs_df['title'].str.contains('Unemployment Rate')]
un_df.shape

import time
all_res =[]
for myid in un_df.index:
  res = fred.get_series(myid)
  res = res.to_frame(name =myid)
  time.sleep(0.1)
  all_res.append(res)

unemp_res=pd.concat(all_res, axis =1)

unemp_res.shape

unemp_state =unemp_res.drop('UNRATE', axis =1)

unemp_state.shape

unemp_state.isna().sum(axis=1).plot()

"""From the above graph , the data contains a lot of noise


"""

df = unemp_state.dropna(axis = 1, how = 'all')
df.shape

cols_to_drop = []
for i in unemp_state:
    if len(i) > 4:
        cols_to_drop.append(i)
unemp_re = unemp_state.drop(columns = cols_to_drop, axis=1)

unemp_re.shape

unemp_re

"""drop all the rows that have null values , make am id to state in the title of each respective state"""

unemp = unemp_re.dropna()
id_to_state = un_df['title'].str.replace('Unemployment Rate in ','').to_dict()
unemp.columns = [id_to_state[c] for c in unemp_re.columns]

unemp.shape

unemp

"""plot states unemployement rate"""

px.line(unemp)

"""# Pull Unemployement rate at diffrent times

# 1- unemployment rates in the US,may-april 2020 , Covid/pandamic
"""

ax = unemp.loc[unemp.index == '2020-05-01'].T.sort_values('2020-05-01').plot(kind='barh', figsize=(8,12), width =0.7, edgecolor ='black',
          title = 'Unemployment Rate by State, April 2020')
ax.legend().remove()
ax.set_xlabel('% Unemployed')
plt.show()

"""# 2-Unemployment Rates in th 2008 recession, from december 2007 till june 2008

"""

unemp_2008 = unemp.loc['2007-12-01':'2008-06-01']

for state in unemp_2008.columns:
    plt.figure(figsize=(5, 3))
    plt.hist(unemp_2008[state])
    plt.xlabel(state)
    plt.ylabel('Unemployment Rate')
    plt.title(f'Unemployment Rate in {state} (2007-12-01 to 2008-06-01)')
    plt.show()

"""# Plot Unemployment vs Participation for each state!

"""

part_df = fred.search('participation rate state', filter=('frequency','Monthly'))
part_df = part_df.query('seasonal_adjustment == "Seasonally Adjusted" and units == "Percent"')

part_id_to_state = part_df['title'].str.replace('Labor Force Participation Rate for ','').to_dict()

all_results = []

for myid in part_df.index:
    results = fred.get_series(myid)
    results = results.to_frame(name=myid)
    all_results.append(results)
    time.sleep(0.1) # it's better to not request to fast or will get blocked
part_states = pd.concat(all_results, axis=1)
part_states.columns = [part_id_to_state[c] for c in part_states.columns]

unemp_= unemp.rename(columns={'the District of Columbia':'District Of Columbia'})
fig, axs = plt.subplots(10, 5, figsize=(30, 30), sharex=True)
axs = axs.flatten()

i = 0
for state in unemp_.columns:
    if state in ["District Of Columbia","Puerto Rico"]:
        continue
    ax2 = axs[i].twinx()
    unemp_.query('index >= 2020 and index < 2022')[state] \
        .plot(ax=axs[i], label='Unemployment')
    part_states.query('index >= 2020 and index < 2022')[state] \
        .plot(ax=ax2, label='Participation', color=color_palette[1])
    ax2.grid(False)
    axs[i].set_title(state)
    i += 1
plt.tight_layout()
plt.show()

"""we notice california didn't have an unemployement rate"""

state = 'California'
fig, ax = plt.subplots(figsize=(10, 5), sharex=True)
ax2 = ax.twinx()
unemp_cali= unemp_.asfreq('MS')
l1 = unemp_cali.query('index >= 2020 and index < 2022')[state] \
    .plot(ax=ax, label='Unemployment')
l2 = part_states.dropna().query('index >= 2020 and index < 2022')[state] \
    .plot(ax=ax2, label='Participation', color=color_palette[1])
ax2.grid(False)
ax.set_title(state)
fig.legend(labels=['Unemployment','Participation'])
plt.show()